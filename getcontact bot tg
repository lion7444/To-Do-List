import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.utils import executor

TOKEN = "YOUR_BOT_TOKEN"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Подключение к базе данных
conn = sqlite3.connect("getcontact.db")
cursor = conn.cursor()

# Создание таблицы, если её нет
cursor.execute("""
CREATE TABLE IF NOT EXISTS contacts (
    phone TEXT PRIMARY KEY,
    name TEXT
)
""")
conn.commit()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply("Привет! Отправь мне номер телефона, и я найду информацию в базе GetContact.")

@dp.message_handler()
async def search_contact(message: types.Message):
    phone = message.text.strip()
    cursor.execute("SELECT name FROM contacts WHERE phone = ?", (phone,))
    result = cursor.fetchone()
    
    if result:
        await message.reply(f"Найдено: {result[0]}")
    else:
        await message.reply("Данные не найдены в базе.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
